{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Mnemonic Debugger","text":"<p>The Mnemonic Debugger is a filing cabinet of our past encounters with obscure programming-related problems and where/how/if we found solutions.</p> <p>Mostly, it serves as a reminder of how to solve past problems if ever they come back to haunt us again!</p>"},{"location":"blog/2016/06/16/semi-beginners-guide-to-reading-a-simple-tbx-file-with-xmltwig-part-i/","title":"Semi-Beginner\u2019s Guide to Reading a Simple TBX file with XML::Twig Part I","text":"<p>I wrote this tutorial for a colleague who is learning Perl and the XML::Twig module.  I wrote this to him in an email, so the tone of this post will be more that of an email.  I leave a lot out and simplify a lot of terms, but I think this will be handy to point to for the next person I need to teach XML::Twig to.</p> <p>The first thing to understand is that XML::Twig (you can find the detailed information on CPAN here http://search.cpan.org/dist/XML-Twig/Twig.pm) is a Perl module that lets you read and edit XML files much easier than you would if you were trying to look for beginning and end tags manually.  I don\u2019t know if you have gotten to modules yet in your Perl studies, but Modules are basically Perl apps that other people have written and put on CPAN (a library of Perl modules) for public use.  In this case, someone wrote a Perl app that reads and writes XML, so you can just use their app by plugging it into your app as a module.  This way you don\u2019t have to create an XML reader/writer yourself and you save countless hours! So, it is not a separate language (although, there is a language called Twig, but that is completely different, so ignore it for now).  Your Perl code in your text editor will just import this module so you can use it in your code (more on this in a moment). I would recommend using the Module App::cpanminus to install all modules.  So, to install these modules open your terminal and type:</p> <pre><code>cpan App::cpanminus\n</code></pre> <p>This will install App::cpanminus.  Once that is complete you will use cpanminus (command \u201ccpanm\u201d) to install XML::Twig:</p> <pre><code>cpanm XML::Twig\n</code></pre> <p>If that went well, we will now import XML::Twig into our Perl app:</p> <ul> <li>Open your perl app in the text editor</li> <li>at the top, after <code>use strict;</code> and <code>use warnings;</code> type: <code>use XML::Twig;</code> (for an example of this, look at line 9 of this file: https://github.com/byutrg/p5-Extract-TBX-Min/blob/master/lib/Extract/TBX/Min.pm)</li> </ul> <p>Now we have told our Perl app to use XML::Twig as a module, which gives us access to the subroutines provided by XML::Twig.  You can see a list of all of the possible subroutines at the XML::Twig CPAN page (the first link in this email). Ok. If everything went ok up to that point, we can now write a simple program.  I am attaching a TBX-Min file to this email for practice.  The first thing we do is create an instance of XML::Twig and define the rules we want our parser to follow.  We do this by writing the following code in the Perl app.  For this test app, we will simply look for the amount of times the element shows up and print it out.</p> <pre><code>my $number_of_terms = 0;    # This will be our counter.\n\nmy $twig_instance = XML::Twig-&gt;new(    # This creates your twig instance and assigns it to the variable $twig_instance.  You can name it whatever you want though.\n    twig_handlers    =&gt;    {  # You may recognize that this is a hash, where \"twig_handlers\" is a key and everything inside of the { }s is the value.  \"twig_handlers\" is a key specific to XML::Twig and it lets us choose which elements we want to look for and do something when we find them\n        term    =&gt;    sub {  # This means, that when the parser finds the closing tag of a element, it will do the code defined in \"sub { }\". You can define the code elsewhere, but for now, we'll do it this way.\n            $number_of_terms++;    # Increment $number_of_terms, since we found one.\n            print \"Found $number_of_terms terms so far!\\n\"; # Print out a progress update.\n        }\n    }\n);\n</code></pre> <p>Now that we have our incrementor, $number_of_terms, and our Twig instance, $twig_instance, with code predefined to do something when Twig finds a element, we actually have to parse our file with our Twig instance.  We do this by using the Twig subroutine \u201cparsefile()\u201d and feeding it a filepath as a variable:</p> <pre><code>my $path_to_TBX = \"filepath/to/TBX-Min-sample.tbxm\";    # For this example we will just hard code the filepath into our program. You would more likely have the user provide this information either with or @ARGV\n\n$twig_instance-&gt;parsefile($path_to_TBX);    # The \"-&gt;\" is how you access the subroutines in our Twig instance (also called an Object).  It just says, run the subroutine \"parsefile\" which is a part of the $twig_instance object\n</code></pre> <p>Now the program will use our $twig_instance to parse $path_to_TBX!  We need to do one last thing though: Print out our $number_of_terms total!</p> <pre><code>print \"Total Number of Terms in File: $number_of_terms\\n\";\n</code></pre> <p>One really important thing to remember about \u201ctwig_handlers\u201d is that they do not \u201ctrigger\u201d the handler (meaning, they do not run the instruction code we write) until the program encounters the closing tag of the element.  This means that Twig will not trigger the \u201cterm\u201d handler when it encounters a start tag () in the TBX-Min file, but will instead trigger when it encounters the end tag (). It works this way so you have access to all of the contents of the term element.  If it triggered at , we would know we hit a term, but we wouldn\u2019t yet know what was inside of it.  Sometimes this is what we want though, so, in addition to the \u201ctwig_handlers\u201d key, there is also the \u201cstart_tag_handlers\u201d key.  Any handlers you define using that will trigger as soon as the start tag of a term element is found, not waiting until the end tag is found. I only covered reading files here, since you don\u2019t need to write files with XML::Twig yet.</p>","tags":["gcc","linux","python","root","autoconf error"]},{"location":"blog/2016/12/24/semi-beginners-guide-to-reading-a-simple-tbx-file-with-xmltwig-part-ii/","title":"Semi-Beginner\u2019s Guide to Reading a Simple TBX file with XML::Twig Part II","text":"<p>This post covers how to get the text value of an element, and how to get the attributes of an element.</p> <p>You can get the contents of a tag quite easily. When Twig runs into one of your twig handlers (like <code>term</code>), it runs the subroutine you define next to your handler (like we covered last time). However, it is also important to know that it passes a couple arguments into your subroutine using the <code>@_</code> array. The first is your <code>$twig</code> object itself, and the second is the Element (Elt) object. The element object has a lot of methods tied to it specifically (read about them here http://search.cpan.org/dist/XML-Twig/Twig.pm#XML::Twig::Elt). The one you want is the <code>XML::Twig::Elt-&gt;text_only()</code> method. This method grabs the text inside of your tags, but ignores the text inside of a nested element.</p> <p>So, if this is our XML to parse:</p> <pre><code>&lt;term&gt; This is a great sentence! &lt;i&gt; It sure is!&lt;/i&gt; &lt;term&gt;\n</code></pre> <p>And this is our code:</p> <pre><code>my $twig_instance = XML::Twig-&gt;new(\n  twig_handlers =&gt; {\n    term =&gt; sub { # Twig automatically passes a couple variables into these subroutines for us in the @_ variable. These are:\n      my ($twig, $elt) = @_; # the $twig itself (this is the entire twig object) and the $elt (element, or node).\n      print $elt-&gt;text_only().\"\\n\"; # In this case, the value of $elt is the 'term' element object. You can get the content of the term element using\n# the $elt-&gt;text() or $elt-&gt;text_only() methods. you can read about the difference in XML::Twig documentation\n    }\n  }\n);\n</code></pre> <p>This will only output \u201cThis is a great sentence!\u201d, but ignore the \u201cIt sure is!\u201d. If you want to grab it all and output \u201cThis is a great sentence! It sure is!\u201d, you would use <code>$elt-&gt;text()</code>, rather than <code>$elt-&gt;text_only()</code>.</p> <p>To handle attributes:</p> <p>XML to parse:</p> <pre><code>&lt;languages source=\"en\" target=\"fr\" /&gt;\n</code></pre> <p>This means:</p> <ul> <li>The element is the <code>languages</code> element</li> <li>It has two <code>attributes</code> or values which are declared within the opening tag of an element. They are:<ul> <li><code>source</code> attribute, with a value of <code>en</code> (for english)</li> <li><code>target</code> attribute, with a value of <code>fr</code> (for french)</li> </ul> </li> </ul> <p>Using the <code>$elt</code> object which <code>XML::Twig</code> gives us, we can get the values of the attributes:</p> <pre><code>my $source = $elt-&gt;att(\"source\");\nmy $target = $elt-&gt;att(\"target\");\n</code></pre> <p>The value of $source will be <code>en</code> and the value of <code>$target</code> will be <code>fr</code>!</p>","tags":["perl","xml","xml::twig"]},{"location":"blog/2016/06/16/installing-gcc-wo-root/","title":"Installing GCC w/o root","text":"<p>I cannot tell you how many times I have been asked to install a Python application on a shared-host server which did not have GCC pre-installed!  Actually, I can: twice.  I failed the first time, gave up and used a different server, and went on to live a happy life \u2014 or so I thought.  But I did not give up the second time.</p> <p>Basically, I was installing a Python library which required pycrypto.  Everything was installing well with pip up to pycrypto until the <code>RuntimeError(\u201cautoconf error\u201c)</code> dampened my eager spirits.  This was the same issue I had run into in the past, but had long since suppressed the memory.  A quick Google search reminded me that the problem could be solved by simply running <code>sudo apt-get install gcc.</code> \u2014 which cannot be done without root privileges which I could have on the shared-host server I\u2019m working with.</p> <p>Unlike my first encounter, I decided this time to dig in and find a way.  That is when I found a helpful root-free gcc install tutorial over at http://luiarthur.github.io/gccinstall.</p> <p>A note on my installation experience:</p> <ul> <li>I first tried GCC 5.4.0, but got:</li> </ul> <pre><code>cannot stat `libgcc_s.so.1\u2032: No such file or directory\n</code></pre> <ul> <li>Not knowing how to handle that (Google couldn\u2019t find me a clear answer), I then tried GCC 6.1.0.  It took a while on my server, but it worked.</li> </ul> <p>Edit:</p> <p>When compiling Python or just installing via \u2018pip\u2019, add <code>env CC=/path/to/new/gcc</code> before your command:</p> <pre><code>~$ env CC=/path/to/new/gcc pip install ...\n</code></pre> <p>or, when compiling manually (exclude \u2013\u2013prefix if the default path is fine , usually default is something like \u2018/usr/bin/blablabla\u2019)</p> <pre><code>~$ env CC=/path/to/new/gcc ./configure \u2013\u2013prefix=/path/to/custom/directory\n\n~$ make\n\n~$ make install\n</code></pre> <p>Note that if you compiled Python from source using your local GCC, you will not need to explicitly declare your GCC with that Python\u2019s installation of pip (since it by default uses the GCC which was used to compile Python).</p>","tags":["gcc","linux","python","root","autoconf error"]},{"location":"blog/2019/03/08/c--checking-for-loops-in-a-singly-linked-list/","title":"C# \u2013 Checking for Loops in a Singly Linked List","text":"<p>I was asked a question about how to check for loops in a singly linked list (a loosely linked collection of objects in which each object references only the next object in the sequence, but not the object prior).</p> <p>After some research I learned that this could be done easily and quickly using pointers and a hash table in C or C++. However, this is a more interesting question in C#, because accessing pointers is easier said than done with managed value types.</p> <p>Ultimately, the solution (posted on GitHub now: https://github.com/SerdoSchofield/SinglyLinkedListTest/tree/master) is to take advantage of the fact that C# passes Objects around as reference types, rather than copying their exact values all over the place. Using this, the solution becomes pretty simple:</p> <ol> <li>Create a HashSet for your object class (A custom Node in my case).</li> <li>Make your way from object to object in your LinkedList, adding each object to the HashSet as you go (Remember: this is not copying their values everywhere, but instead only using references so it is not a memory hog)</li> <li>Because HashSet must have entirely unique values, you can check using HashSet.Contains() to see if the next object is already found. If it has been, congratulations! You found the loop!</li> </ol> <pre><code>static void CheckForLoops(LinkedList linkedList){\n     var curr = linkedList.First;\n     HashSet hashCodes = new HashSet();\n     while (Next(curr, linkedList.First) != null)     {\n         hashCodes.Add(curr);\n         if (hashCodes.Contains(curr.next))\n             Console.WriteLine($\"{curr.data.ToString()}: \n               {curr.next.data.ToString()} --- We've seen this before!! \n               {curr.GetHashCode()} {curr.next.GetHashCode()}\");\n         curr = Next(curr, linkedList.First);\n     }\n}\n</code></pre> <p>Never mind that this scenario would likely never arise in modern C#, it was a pretty fun puzzle to solve.</p>","tags":["csharp","puzzles","singlylinkedlist"]},{"location":"blog/2020/10/07/augmenting-js-functions-to-self-identify/","title":"Augmenting JS Functions to Self-Identify","text":"<p>Sometimes, if you are debugging in a legacy JS environment, you may not have just an easy time tracking down the source of a bug, or figuring out the exact order of events. This is an abominable trick I discovered on SO (possibly from this post). I was trying to find it again yesterday but I couldn\u2019t get the Google search right, so it took forever, so I\u2019m putting it here in the Mnemonic Debugger!</p> <p>Anyway, without further ado I present to you:</p> <pre><code>function augment(withFn) {\n    var name, fn;\n    for (name in window) {\n        fn = window[name];\n        if (typeof fn === 'function') {\n            window[name] = (function(name, fn) {\n                var args = arguments;\n                return function() {\n                    withFn.apply(this, args);\n                    return fn.apply(this, arguments);\n                }\n            })(name, fn);\n        }\n    }\n}\naugment(function(name, fn) {\n    console.log(\"calling \" + name);\n});\n</code></pre> <p>Just plop it in at the end of your JS file and give it a go! Every time a function is called it should print its name to the dev console.</p>","tags":["web","JavaScript"]},{"location":"blog/2020/09/12/sony-wh-ch700n-vs-bluetooth-dongles-and-windows-10/","title":"Sony WH-CH700N vs Bluetooth Dongles and Windows 10","text":"<p>With businesses being forced to see the light on the issue facilitating and encouraging remote work due to COVID-19, many people suddenly found themselves in need of decent headsets to keep up with all those Zoom meetings \u2013 myself included. I decided it was time to get a new headset for myself. After some (admittedly light) research, I found the Sony WH-CH700N noise cancelling headphones on sale at BestBuy.</p> <p></p> <p>https://www.sony.com/electronics/headband-headphones/wh-ch700n</p> <p>After I got them I was dismayed to find out that they worked for my laptop, but not my Desktop. Months passed and I googled everything I could think of. Nothing. First I tried replacing my ASUS BT-400 bluetooth USB adapter with a \u201cnewer\u201d Insignia adapter with no luck. Then I blamed Windows 10 1909 and assumed they had broken something and left it at that.</p> <p>I would \u201cpair\u201d them successfully with Windows only to then get an error that they could not be found: \u201cyour devices are paired but not connected\u201c</p> <p>Most of the posts I found (like this one: https://www.drivereasy.com/knowledge/fix-bluetooth-paired-but-not-connected-error-on-windows-10/), did not solve my issues.</p> <p>Finally, two weeks ago I decided to roll the dice again. I typed every variation of Google search I could think of and finally found a single support post where it was suggested that the issue was being caused by a lack of Advanced Audio Distribution Profile (A2DP) support, which is apparently required by the headset. In wary desperation I ordered a new bluetooth USB adapter that explicitly touted support for A2DP: the Avantree DG40S.</p> <p></p> <p>https://www.amazon.com/Avantree-Bluetooth-Computer-Keyboard-Warranty/dp/B00VWEK4IG/ref=sr_1_3?dchild=1&amp;keywords=Avantree+DG40S+USB+Bluetooth+Adapter+for+PC&amp;qid=1599948292&amp;s=electronics&amp;sr=1-3</p> <p>And\u2026</p> <p>IT WORKED!</p> <p>Not much more to say about it. If you are encountering these issues with your WH-CH700N, try getting a bluetooth adapter that supports A2DP.</p>","tags":["bluetooth","sony","usb","wh-c700n"]},{"location":"blog/archive/2020/","title":"2020","text":""},{"location":"blog/archive/2019/","title":"2019","text":""},{"location":"blog/archive/2016/","title":"2016","text":""}]}